@page "/editproducts"
@rendermode InteractiveServer
@using Core.DTOs
@using Core.Entites
@using Core.Services
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using MudBlazor.Charts
@inject ProductService productService
@inject CategoryService categoryService

<div class="d-flex flex-row mb-5">
    <MudItem xs="12" sm="3">
        <MudPaper Class="pa-4 mr-4">
            <MudForm Model="@productDto" @ref="form" @bind-IsValid="@formSuccess">

                <MudTextField @bind-Value="productDto.Artist" T="string" Required="true" Label="Artist" For="@(()=> productDto.Artist)"/>
                <MudTextField @bind-Value="productDto.AlbumTitle" T="string" Label="Album" For="@(()=> productDto.AlbumTitle)" />
                <MudTextField @bind-Value="productDto.PictureUrl" T="string" Label="Picture" For="@(()=> productDto.PictureUrl)" />
                <MudTextField @bind-Value="productDto.Price" T="long" Label="Price" For="@(()=> productDto.Price)" />
                <MudTextField @bind-Value="productDto.StockQuantity" T="int" Label="Stock" For="@(()=> productDto.StockQuantity)" />
                <MudSelect T="int" Label="Select Category" @bind-Value="productDto.CategoryId" For="@(()=> productDto.CategoryId)">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem T="int" Value="category.Id">@category.Name</MudSelectItem>

                    }
                </MudSelect>
                <MudSwitch @bind-Value="productDto.IsProductAvailable" Label="Available" Color="Color.Success" UncheckedColor="Color.Error" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Style="margin: 10px" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formSuccess)" Class="ml-auto" OnClick="@CreateProduct">Add</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>



    <MudItem xs="12" sm="9">
        <MudDataGrid T="ProductDTO" Items="@products" Filterable="false" QuickFilter="@_quickFilter" SortMode="@SortMode.Single" Groupable="false" Bordered="true" ColumnResizeMode="ResizeMode.Column" ReadOnly="false"
        EditMode="DataGridEditMode.Form" StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Records:</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Product Id" />
                <PropertyColumn Property="x => x.Artist" Title="Artist Name" />
                <PropertyColumn Property="x => x.AlbumTitle" Title="Album Title" />
                <PropertyColumn Property="x => x.Price" />
                <PropertyColumn Property="x => x.StockQuantity" Title="Stock" />
                <PropertyColumn Property="x => x.IsProductAvailable" Title="Available" />
                <PropertyColumn Property="x => x.Category.Name" Title="Category" />
                <TemplateColumn CellClass="justify-content">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                            <MudIconButton @onclick="@(()=>DeleteProduct(context.Item.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>
</div>

@code {
    public IEnumerable<ProductDTO> products;
    public IEnumerable<CategoryDTO> categories = Enumerable.Empty<CategoryDTO>();

    private ProductDTO productDto = new() { Category = new Category() { Id = 0, Name = string.Empty } };
    private string _searchString;
    private List<string> _events = new();
    bool formSuccess;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        await ListProducts();
        await ListCategories();
    }

    private Func<ProductDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Artist.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.AlbumTitle.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Category.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    // Product events
    void StartedEditingItem(ProductDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ProductDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(ProductDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        await EditProduct(item.Id, item);
    }

    public async Task ListProducts()
    {
        products = await productService.GetAllAsync();
    }
    public async Task ListCategories()
    {
        categories = await categoryService.GetAllAsync();
    }
    private async Task CreateProduct()
    {
        
        await productService.PostAsync(productDto);
        await ListProducts();

    }
    public async Task EditProduct(int productId, ProductDTO updatedProduct)
    {
        await productService.UpdateProductAsync(productId, updatedProduct);
        await ListProducts();
    }
    public async Task DeleteProduct(int productId)
    {
        await productService.DeleteAsync(productId);
        await ListProducts();
    }
}
