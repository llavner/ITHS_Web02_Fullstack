@page "/products"
@rendermode InteractiveServer
@using Core.Services
@using Core.DTOs
@using Core.Extensions
@using Estore.Client.Components.Pages
@inject ISnackbar Snackbar
@inject ProductService productService

<div class="container">

    <MudAppBar Fixed="false" Style="position:fixed; left:0; top:64px; min-width:100%; height:42px; color:brown; justify-content:center">
        <div class="row w-100">
            <div class="text-left">
                <MudButton Color="Color.Inherit" OnClick="@(()=> FilterProducts("All"))">All</MudButton>
                <MudButton Color="Color.Inherit" OnClick="@(()=> FilterProducts("CD"))">CD</MudButton>
                <MudButton Color="Color.Inherit" OnClick="@(()=> FilterProducts("Vinyl"))">Vinyl</MudButton>
                <MudButton Color="Color.Inherit" OnClick="@(()=> FilterProducts("Casette"))">Casette</MudButton>
            </div>
            @* <div class="col-7 text-center">
                <input class="border-1 rounded m-6 p-6 h-6" @bind-value="searchText"
                @bind-value:event="oninput" @oninput="" placeholder="Search..." />
            </div> *@
        </div>
    </MudAppBar>


    <div class="row mb-5 mt-5">
        @if (FilteredProducts is not null)
        {

            @foreach (var item in FilteredProducts)
            {
                if (item.IsProductAvailable)
                {

                    <div class="col-md-3 mt-3 mb-5 justify-content-center">
                        <MudGrid>
                            <MudCard Style="width:12rem; height: 23rem">
                                <MudCardMedia Image="@($"{picFolder}{item.PictureUrl}")" Height="200" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@item.Artist</MudText>
                                    <MudText Typo="Typo.body2">@item.AlbumTitle</MudText>
                                    <small class="d-flex justify-content-between text-muted">
                                        @item.Category.Name
                                        <span class="fw-bold">@item.Price :-</span>
                                    </small>
                                </MudCardContent>
                                <div class="d-flex justify-content-end">
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Success" Style="background-color: rgba(56, 142, 60, 0.7);" OnClick="@(()=>AddItemToCart(item))">Buy</MudButton>
                                    </MudCardActions>
                                </div>
                            </MudCard>
                        </MudGrid>
                    </div>
                }
                else
                {
                    <div class="col-md-3 mt-3 mb-5 justify-content-center">
                        <MudGrid>
                            <MudCard Style="width:12rem; height: 23rem; opacity:0.5">
                                <MudCardMedia Image="@($"{picFolder}{item.PictureUrl}")" Height="200" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@item.Artist</MudText>
                                    <MudText Typo="Typo.body2">@item.AlbumTitle</MudText>
                                    <small class="d-flex justify-content-between text-muted">
                                        @item.Category.Name
                                        <span class="fw-bold">Out of Stock</span>
                                    </small>
                                </MudCardContent>
                            </MudCard>
                        </MudGrid>
                    </div>
                }
            }
        }
    </div>


</div>

@code {
    public IEnumerable<ProductDTO>? products { get; set; }
    public IEnumerable<ProductDTO>? FilteredProducts { get; set; }

    private string? searchText;


    public string picFolder = "/images/AlbumCovers/";

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetAllAsync();
        FilteredProducts = products;
    }

    public void FilterBySearch()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredProducts = products;
        }
        else
        {
            FilteredProducts = products.Where(x => x.Artist.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
    }

    public void FilterProducts(string category)
    {
        switch (category)
        {
            case "All":
                FilteredProducts = products;
                break;
            case "CD":
                if (products is null) throw new ArgumentNullException("Products is null");
                FilteredProducts = products.Where(p => p.Category.Name == "CD");
                break;
            case "Vinyl":
                if (products is null) throw new ArgumentNullException("Products is null");
                FilteredProducts = products.Where(p => p.Category.Name == "Vinyl");
                break;
            case "Casette":
                if (products is null) throw new ArgumentNullException("Products is null");
                FilteredProducts = products.Where(p => p.Category.Name == "Casette");
                break;

        }
    }
    public void AddItemToCart(ProductDTO item)
    {
        if (products == null) throw new ArgumentNullException("List not found");
        ShoppingCart.MyCart.AddItem(item, products);
        Snackbar.Add($"Item added to cart!", Severity.Success);
    }

}



