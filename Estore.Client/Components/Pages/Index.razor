@page "/"
@rendermode InteractiveServer
@using Core.DTOs
@using Core.Services
@using Estore.Client.Components.Pages.PageComponents
@inject ProductService productService
@inject ContentService contentService


<div class="container">

    <div class="d-flex flex-column justify-space-between">
        <MudAppBar Color="Color.Primary" Fixed="true">
            <div class="d-flex col-7">
            <MudText Typo="Typo.h6" Class="ml-2">Record Store</MudText>
            </div>
            <div class="d-flex col-5">
            <MudIconButton Icon="@Icons.Material.Filled.Storefront" Edge="Edge.End" Color="Color.Inherit" Size="Size.Medium" OnClick=@(() => contentService.SelectContent("Products")) />
            <MudIconButton Icon="@Icons.Material.Filled.Person" Edge="Edge.End" Color="Color.Inherit" Size="Size.Medium" OnClick=@(() => contentService.SelectContent("Login")) />
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Edge="Edge.End" Color="Color.Inherit" Size="Size.Medium" OnClick=@(() => contentService.SelectContent("Cart")) />
            </div>
        </MudAppBar>
    </div>
    <div class="d-flex flex-column min-vh-100">
        <div class="content flex-grow-1">
            @if (contentService.SelectedContent == "Products")
            {
                <Products />
            }
            else if (contentService.SelectedContent == "Login")
            {
                <Login />
            }
            else if (contentService.SelectedContent == "Cart")
            {
                <ShoppingCart />
            }
            else if (contentService.SelectedContent == "Register")
            {
                <Register />
            }
        </div>

        <div class="footer">
            <Footer />
        </div>
    </div>
</div>
@code {

    protected override async void OnInitialized()
    {
        contentService.SelectContent("Products");
        contentService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        contentService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }
}
