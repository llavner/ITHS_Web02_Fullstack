@page "/editorders"
@rendermode InteractiveServer
@using Core.DTOs
@using Core.Entites
@using Core.Services
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using MudBlazor.Charts
@inject OrderService orderService

<div class="d-flex flex-row justify-content-center">
    <MudItem xs="12" sm="6">
        <MudDataGrid T="OrderDTO" Items="@orders" Filterable="false" QuickFilter="@_quickFilter" SortMode="@SortMode.None" Groupable="false" Bordered="true" ColumnResizeMode="ResizeMode.Column" ReadOnly="false"
        EditMode="DataGridEditMode.Form" StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Orders:</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Order Id" />
                <PropertyColumn Property="x => x.UserId" Title="User" />
                <PropertyColumn Property="x => x.OrderDate" Title="Date"/>
                <PropertyColumn Property="x => x.Status" Title="Status" />
                <TemplateColumn CellClass="justify-content">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                            <MudIconButton @onclick="@(()=>DeleteOrder(context.Item.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudImage Src="images/under_construction.png" Alt="Under Construction" Elevation="25" Class="rounded-lg ma-4"/>
    </MudItem>
    
    
</div>

@code {
    public IEnumerable<UserDTO> users;
    public IEnumerable<OrderDTO> orders = Enumerable.Empty<OrderDTO>();

    private UserDTO customerDto = new(); /* { Order = new Order() { Id = 0, Name = string.Empty, OrderDetailsId = 0 } }; */
    private string _searchString;

    private List<string> _events = new();

    bool formSuccess;
    MudForm form;

    private Func<OrderDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.User.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.User.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.User.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    // Order events
    void StartedEditingItem(OrderDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(OrderDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(OrderDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

    }

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task ListOrders()
    {
        
    }

    public void DeleteOrder(int orderId)
    {
        
    }
}