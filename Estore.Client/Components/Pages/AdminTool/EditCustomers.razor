@page "/editcustomer"
@rendermode InteractiveServer
@using Core.DTOs
@using Core.Entites
@using Core.Services
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using MudBlazor.Charts
@* @inject ProductService productService
@inject CategoryService categoryService *@

<div class="d-flex flex-row gap-10">
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-4">
            <MudForm Model="@customerDto" @ref="form" @bind-IsValid="@formSuccess">

                <MudTextField @bind-Value="customerDto.FirstName" T="string" Label="First name" />
                <MudTextField @bind-Value="customerDto.LastName" T="string" Label="Last name"/>
                <MudTextField @bind-Value="customerDto.Email" T="string" Label="Email" />
                <MudTextField @bind-Value="customerDto.Address" T="string" Label="Address" />
                <MudTextField @bind-Value="customerDto.PhoneNumber" T="string" Label="Phone number" />
                @* <MudSelect T="CategoryDTO" Label="Select Category" @bind-Value="selectedCategory">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem T="CategoryDTO" Value="category">@category.Name</MudSelectItem>
                    }
                </MudSelect> *@
                <MudButton Style="margin: 10px" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formSuccess)" Class="ml-auto">Add</MudButton>

            </MudForm>
        </MudPaper>
    </MudItem>



    <MudItem xs="12" sm="6">
        <MudDataGrid T="CustomerDTO" Items="@customers" Filterable="false" SortMode="@SortMode.None" Groupable="false" Bordered="true" ColumnResizeMode="ResizeMode.Column" ReadOnly="false"
        EditMode="DataGridEditMode.Form" StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
            <Columns>
                <PropertyColumn Property="x => x.FirstName" Title="First name" />
                <PropertyColumn Property="x => x.LastName" Title="Last name"/>
                <PropertyColumn Property="x => x.Email" />
                <PropertyColumn Property="x => x.Address" />
                <PropertyColumn Property="x => x.PhoneNumber" Title="Phone number" />
                <TemplateColumn CellClass="justify-content">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                            <MudIconButton @onclick="@(()=>DeleteCustomer(context.Item.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>
</div>
@code {
    public IEnumerable<CustomerDTO> customers;
    public IEnumerable<OrderDTO> orders = Enumerable.Empty<OrderDTO>();

    private CustomerDTO customerDto = new(); /* { Order = new Order() { Id = 0, Name = string.Empty, OrderDetailsId = 0 } }; */
    private OrderDTO selectedOrder;

    private List<string> _events = new();

    bool formSuccess;
    MudForm form;

    // Customer events
    void StartedEditingItem(CustomerDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CustomerDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(CustomerDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

    }

    public async Task DeleteCustomer(int id)
    {
        
    }
}
