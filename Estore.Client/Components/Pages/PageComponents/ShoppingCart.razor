@page "/shoppingcart"
@using Core.Services
@using Core.Extensions
@using Core.DTOs
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@inject ProductService productService
@inject OrderService orderService

<div class="container">
    <div class="mb-5 d-flex justify-content-center">
        <table class="table table-striped mt-5" style="max-width:600px">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Album Title</th>
                    <th scope="col">Artist</th>
                    <th scope="col">Quantity</th>
                    <th scope="col"></th>
                    <th scope="col">Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in MyCart.CartItems)
                {
                    <tr>
                        <td>
                            <img src="@($"{picFolder}{item.PictureUrl}")" alt="@item.AlbumTitle" class="img-thumbnail" style="width: 50px; height: 50px;">
                        </td>
                        <td>@item.AlbumTitle</td>
                        <td>@item.Artist</td>
                        <td style="align-items:center">@item.Quantity</td>
                        <td>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => Add(item))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small" OnClick="@(() => Remove(item))" />
                        </td>
                        <td class="text-muted">@((item.Price * item.Quantity).ToString("C"))</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="6" class="h5 text-end">
                        Total: @MyCart.CartItems.Sum(item => item.Price * item.Quantity).ToString("C")
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <div class="d-flex justify-content-center">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ShoppingCartCheckout" Color="Color.Success" OnClick="@Purchase">Purchase</MudButton>
    </div>
</div>
@code {
    public static CartDTO MyCart = new();

    public string picFolder = "/images/AlbumCovers/";

    protected override async Task OnInitializedAsync()
    {

        MyCart.CartItems.ToList();

    }

    public async Task Purchase()
    {
        //await orderService.AddOrderAsync(MyCart);

    }

    public void Add(CartItemDTO item)
    {
        var existingItem = MyCart.CartItems.FirstOrDefault(i => i.ProductId == item.ProductId);

        if (existingItem == null) throw new ArgumentNullException("Item not found");

        existingItem.Quantity++;

        Snackbar.Add($"Amount increased", Severity.Success);
    }

    public void Remove(CartItemDTO item)
    {
        var existingItem = MyCart.CartItems.FirstOrDefault(i => i.ProductId == item.ProductId);

        if (existingItem == null) throw new ArgumentNullException("Item not found");

        if (existingItem.Quantity <= 1)
        {
            MyCart.CartItems.Remove(existingItem);
        }
        else
        {
            existingItem.Quantity--;
        }

        Snackbar.Add($"Amount Decreased", Severity.Error);
    }
}
